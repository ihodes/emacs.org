#+TITLE: Literate Configuration

* Prelude

  This is the beginning of a literate emacs configuration.

  Aside from defining some functions I don't want mixed in with my
  configuration, I also load some functions containing information I don't want
  checked into the public repo.

  #+name: prelude
  #+BEGIN_SRC emacs-lisp :tangle no
    (defun read-string-from-file (path)
      "Return filePath's file content as a lisp form."
      (with-temp-buffer
        (insert-file-contents path)
        (car (read-from-string (buffer-string)))))
  #+END_SRC

* Packages

  We load and configure all packages with
  [[https://github.com/jwiegley/use-package]] mode, which we bootstrapped
  in `init.el`.

  #+name: packages
  #+BEGIN_SRC emacs-lisp :tangle no
    (require 'use-package)
    (setq use-package-always-ensure t)
  #+END_SRC


* Look & Feel

  First things first, let's make emacs pretty.

  #+name: look-and-feel
  #+BEGIN_SRC emacs-lisp :tangle no
    ;; Install theme if not already installed
    (use-package material-theme
      :ensure t
      :init (load-theme 'material t))

    (setq ihodes/dark-theme 'solarized-dark)
    (setq ihodes/light-theme 'solarized-light)
    (defun ihodes/toggle-theme ()
      (interactive)
      (if (string-match-p (regexp-quote "dark") (format "%s" (car custom-enabled-themes)))
          (load-theme ihodes/light-theme)
        (load-theme ihodes/dark-theme)))

    (blink-cursor-mode 0)
    (setq initial-scratch-message "")
    (setq inhibit-startup-message t)
    (setq inhibit-startup-echo-area-message "isaachodes")
    (menu-bar-mode -1)
    (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (show-paren-mode 1)
    (set-face-attribute 'mode-line nil
                        :foreground "gray100" :background "gray10"
                        :inverse-video nil
                        :box '(:line-width 6 :color "gray20" :style nil))
    (set-face-attribute 'mode-line-inactive nil
                        :foreground "gray30" :background "gray10"
                        :inverse-video nil
                        :box '(:line-width 6 :color "gray10" :style nil))
  #+END_SRC

* Defaults

  Here we set some defaults which generally make emacs a more well-behaved
  editor.

  #+name: defaults
  #+BEGIN_SRC emacs-lisp :tangle no
    (column-number-mode t)
    (setq compilation-scroll-output t)
    (setq kill-ring-max 500)
    (setq js-indent-level 2)
    (setq make-backup-files nil)  ; Stop making backup files
    (setq auto-save-default nil)  ; Stop auto-save files (#name#)
    (setq tramp-default-method "ssh")
    (setq auto-save-default nil)
    (global-set-key "\M-N" "\C-u3\C-v")
    (global-set-key "\M-P" "\C-u3\M-v")
    (require 'uniquify)
    (setq-default uniquify-buffer-name-style 'forward)

    (setq-default save-place-file (concat user-emacs-directory "places"))
    (setq-default indent-tabs-mode nil
                  fill-column 80
                  show-trailing-whitespace t
                  auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
                  enable-recursive-minibuffers t
                  apropos-do-all t
                  backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                           "backups"))))
  #+END_SRC
* Modes

  Here we activate modes and do a lot of stuff which should be split out into
  smaller code blocks.

  And configure most of them...

** Main
  #+name: modes
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package vertico
      :ensure t
      :demand t
      :config
      (vertico-mode))

    (use-package orderless
      :ensure t
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))

    (use-package marginalia
      :ensure t
      :init
      (marginalia-mode))

    (use-package consult
      :ensure t
      :bind
      ("C-x b" . consult-buffer)
      ("C-x B" . consult-bookmark)
      ("C-x C-l" . consult-goto-line)
      ("C-M-y" . consult-yank-replace))

    (use-package embark
      :ensure t
      :bind
      (:map minibuffer-local-map
            ("M-o" . embark-act)))

    (use-package embark-consult
      :ensure t
      :after (embark consult))

    (defun ihodes/set-exec-path-from-shell-PATH ()
      "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.

                  This is particularly useful under Mac OSX, where GUI apps are not started from a shell.

                  from http://stackoverflow.com/questions/8606954/path-and-exec-path-set-but-emacs-does-not-find-executable"
      (interactive)
      (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell path-separator))))

    (use-package ace-jump-mode
      :ensure t
      :bind ("M-o" . ace-jump-mode))

    (use-package ace-window
      :ensure t
      :bind ("M-p" . ace-window))

    (use-package paredit
      :ensure t
      :hook ((scheme-mode
              lisp-mode
              emacs-lisp-mode
              clojure-mode
              lisp-interaction-mode
              eval-expression-minibuffer-setup) . paredit-mode)
      :bind (("M-<right>" . paredit-forward-slurp-sexp)
             ("M-<left>" . paredit-forward-barf-sexp)))

    (use-package web-mode
      :ensure t
      :mode (("\\.phtml\\'" . web-mode)
             ("\\.jsx\\'" . web-mode)
             ("\\.tsx\\'" . web-mode)
             ("\\.tpl\\.php\\'" . web-mode)
             ("\\.jsp\\'" . web-mode)
             ("\\.as[cp]x\\'" . web-mode)
             ("\\.erb\\'" . web-mode)
             ("\\.ejs\\'" . web-mode)
             ("\\.mustache\\'" . web-mode)
             ("\\.djhtml\\'" . web-mode)
             ("\\.html?\\'" . web-mode)
             ("\\.css?\\'" . web-mode))
      :config
      (setq web-mode-markup-indent-offset 2
            web-mode-css-indent-offset 2
            web-mode-engines-alist '(("erb" . "\\.ejs\\'")))

      (bind-keys :map web-mode-map ("C-c /" . web-mode-element-close)))

    (use-package smart-mode-line
      :ensure t
      :config
      (setq sml/no-confirm-load-theme t)
      (sml/setup)
      (add-to-list 'sml/replacer-regexp-list '("^~/workspace/" ":W:") t)
      (add-to-list 'sml/hidden-modes " Undo-Tree")
      (add-to-list 'sml/hidden-modes " MRev")
      (add-to-list 'sml/hidden-modes " Paredit")
      (add-to-list 'sml/hidden-modes " hl-s")
      (add-to-list 'sml/hidden-modes " Helm")
      (add-to-list 'sml/hidden-modes " company")
      (add-to-list 'sml/hidden-modes " yas")
      (add-to-list 'sml/hidden-modes " ivy")
      (add-to-list 'sml/hidden-modes " Projectile"))

    (use-package ag
      :ensure t
      :bind ("<f2>" . ag-project)
      :config
      (setq ag-highlight-search t))



    (use-package visual-regexp
      :ensure t
      :bind (("C-c q" . vr/query-replace)
             ("C-c r" . vr/replace)
             ("s-c" . vr/mc-mark)))

    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode 1)
      :bind (("C-x C-u" . undo-tree-undo)
             ("C-x C-r" . undo-tree-redo))
      :config
      (setq undo-tree-history-directory-alist
            `((".*" . ,temporary-file-directory)))
            (setq undo-tree-auto-save-history t))

    (use-package haskell-mode
      :ensure t
      :mode "\\.hs\\'"
      :hook (haskell-mode . turn-on-haskell-indentation))

    (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status)
      :config
      (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))


    (use-package git-timemachine
      :ensure t)

    (use-package projectile
      :ensure t
      :bind ("s-p" . projectile-commander)
      :config
      (projectile-mode +1)
      (setq projectile-mode-line-prefix " @:")
      (setq projectile-mode-line-function '(lambda () (format " @:%s" (projectile-project-name)))))

    (use-package rainbow-delimiters
      :ensure t
      :hook (prog-mode . rainbow-delimiters-mode))

    (use-package yasnippet :ensure t)

    (use-package lsp-bridge
      :after (markdown-mode yasnippet)
      :init (yas-global-mode 1)
      :ensure '(lsp-bridge
                :host github
                :repo "manateelazycat/lsp-bridge"
                :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources" "icons")
                :build (:not compile))
      :config
      (defun enable-lsp-bridge ()
        ;; This finds the langserver.json config file at current project root
        ;; (i.e. the dir where .git is) and uses that to configure and get the right
        ;; paths. e.g. in ~/ihodes.github.io I have a jedi.json filej. This bypasses
        ;; the challenges of workjing in venvs by just manually setting the venv's
        ;; python instance and editing the path.
        (interactive)
        (when-let* ((project (project-current))
                    (project-root (nth 2 project)))
          (setq-local lsp-bridge-user-langserver-dir project-root
                      lsp-bridge-user-multiserver-dir project-root))
        (global-lsp-bridge-mode))
      (enable-lsp-bridge)
      (setq lsp-bridge-python-command "python3")
      (setq lsp-bridge-python-lsp-server "jedi"))
  #+END_SRC

  Finally we quick'n'dirtily set some little text modes.

  #+name: modes-el
  #+BEGIN_SRC emacs-lisp :tangle no
    (defvar ihodes/text-modes
      '(("\\.avpr?\\'" . js-mode)
        ("\\.avdl?\\'" . c-mode)
        ("\\.yml\\'" . yaml-mode)
        ("\\.markdown\\'" . gfm-mode)
        ("\\.md\\'" . gfm-mode)))

    (dolist (mm ihodes/text-modes)
      (add-to-list 'auto-mode-alist mm))

    ;; https://github.com/purcell/exec-path-from-shell
    (use-package exec-path-from-shell
      :ensure t
      :config
      (when (memq window-system '(mac ns))
        (exec-path-from-shell-initialize)))

    (add-hook 'sql-interactive-mode-hook '(lambda () (toggle-truncate-lines t)))
  #+END_SRC

** Journal & Notes

I use emacs + markdown to journal and take notes. This is synced via Dropbox so
that I can 1) have my notes saved somewhere safe and 2) view and edit notes on
my mobile device.

deft and markdown-mode do much of the heavy lifting here. I use local checkouts
so that I can pick up my modifications to these libraries as soon as I need
them.

#+name: journaling
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package markdown-mode
    :ensure t
    :bind
    (:map markdown-mode-map
          ("C-c >" .  org-time-stamp)
          ("C-c <" .  org-date-from-calendar)
          ("C-c m" . mmm-parse-buffer)
          ("C-c j" . ihodes/hydra/start-new-journal-entry/body)
          ("M-p" . nil))
    :config
    (defun s-trim-right (s)
      "Remove whitespace at the end of S."
      (if (string-match "[ \t\n\r]+\\'" s)
          (replace-match "" t t s)
        s))
    (custom-set-faces
     '(markdown-header-face
       ((t (:inherit font-lock-function-name-face
            :weight bold :family "variable-pitch"))))
     '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.7))))
     '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.4))))
     '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.2)))))
    (setq markdown-command "marked --gfm --tables --smart-lists --breaks")
    (setq markdown-asymmetric-header t)
    (setq markdown-gfm-additional-languages
          '("ocaml" "python" "javascript" "js" "r" "java" "clojure" "scheme"))
    (require 'semantic/sb)                ; so that we can use CEDET's setq-mode-local
    (setq-mode-local markdown-mode show-trailing-whitespace nil))

  (use-package visual-fill-column
    :ensure t
    :config
    (setq fill-column 80)
    (defun ihodes/activate-visual-line-mode-for-notes ()
      "Activate soft line-wrapping when inside a text file that can
      be read in Dropbox; this lets us view them nicely on a mobile
      device as well as on desktop."
      (when (and buffer-file-name
                 (string-match "text/" buffer-file-name)
                 (string-match "\\.md\\'" buffer-file-name))
        (progn (visual-fill-column-mode t)
               (visual-line-mode t)
               (adaptive-wrap-prefix-mode t))))
    (add-hook 'find-file-hook 'ihodes/activate-visual-line-mode-for-notes))

  (use-package adaptive-wrap
    :ensure t)
#+END_SRC

** Org

Very rudimentary customization of ~org-mode~.

#+name: org-mode
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-src-fontify-natively nil)

  (defun ihodes/org-link-at-point ()
    "Return the link of the org-link at point."
    (interactive)
    (let* ((el (org-element-context))
           (map (org-element-map el)))
      (message (org-element-property :link map))))

  (use-package org
    :ensure nil
    :bind
    (("C-c i" . ispell)
     ("M-I" . org-toggle-inline-images)
     ("M-i" . org-toggle-image-in-org)
     ("C-M-c" . ihodes/org-link-at-point)))

  ;; Define org-toggle-image-in-org as a replacement for org-toggle-inline-image
  (defun org-toggle-image-in-org ()
    "Toggle the image at point."
    (interactive)
    (let ((context (org-element-context)))
      (when (eq (org-element-type context) 'link)
        (org-toggle-inline-images))))

#+END_SRC

** Javascript / Typescript
  #+name: modes-ts
  #+BEGIN_SRC emacs-lisp :tangle no
    ;; TypeScript support
    (use-package typescript-mode
      :ensure t
      :mode "\\.ts\\'")

    ;; Add TypeScript to web-mode
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  #+END_SRC

** Clojure settings

Clojure-mode is useful for ~.edn~, ~.cljs~, and ~.cljx~ files as well.

  #+name: modes-cl
  #+BEGIN_SRC emacs-lisp :tangle no
    (dolist (mm '(("\\.edn\\'" . clojure-mode)
                  ("\\.cljs\\'" . clojure-mode)
                  ("\\.cljx\\'" . clojure-mode)))
      (add-to-list 'auto-mode-alist mm))

    ;; CIDER - the Clojure Interactive Development Environment
    (use-package cider
      :ensure t
      :defer t
      :config
      (add-hook 'cider-mode-hook 'eldoc-mode)
      (add-hook 'cider-repl-mode-hook 'paredit-mode)
      (setq nrepl-hide-special-buffers t)
      (setq cider-auto-select-error-buffer t))
  #+END_SRC

Some common Clojure functions look better with different indentation, so we set
those here.

  #+name: modes-el2
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package clojure-mode
      :ensure t
      :config
      (define-clojure-indent
        (defroutes 'defun)
        (GET 2)
        (POST 2)
        (PUT 2)
        (DELETE 2)
        (HEAD 2)
        (ANY 2)
        (context 2)
        (form-to 1)
        (match 1)
        (are 2)
        (select 1)
        (insert 1)
        (update 1)
        (delete 1)
        (run* 1)
        (fresh 1)
        (extend-freeze 2)
        (extend-thaw 1)))
  #+END_SRC

** Misc
   #+name: misc
   #+BEGIN_SRC emacs-lisp :tangle no

     ;; YAML mode
     (use-package yaml-mode
       :ensure t
       :mode "\\.ya?ml\\'")
   #+END_SRC

* Gittit
  ~gittit~ is a little library I wrote to connect local files to GitHub repos.

  These are our utility functions.

  #+name: gittit
  #+BEGIN_SRC emacs-lisp :tangle no
    (defun gittit:base-github-url ()
      (let* ((git-url (shell-command-to-string "git config --get remote.origin.url"))
             (http-url (replace-regexp-in-string "git@" "" git-url))
             (http-url (replace-regexp-in-string "\.git" "" http-url))
             (http-url (replace-regexp-in-string ":" "/" http-url))
             (http-url (replace-regexp-in-string "\n" "" http-url)))
        http-url))

    (defun gittit:current-branch-name ()
      (replace-regexp-in-string "\n" "" (shell-command-to-string "git rev-parse --abbrev-ref HEAD")))

    (defun gittit:parent-directory (dir)
      (unless (equal "/" dir)
        (file-name-directory (directory-file-name dir))))

    (defun gittit:base-git-directory (filename)
      (let ((base-dir (file-name-directory filename)))
        (if (file-exists-p (concat base-dir ".git"))
          base-dir
          (gittit:base-git-directory (gittit:parent-directory base-dir)))))

    (defun gittit:github-url-for-file (filename)
      (format "http://%s/blob/%s/%s"
              (gittit:base-github-url)
              (gittit:current-branch-name)
              (replace-regexp-in-string (gittit:base-git-directory filename) "" filename)))

    (defun gittit:github-url-for-line (filename start &optional end)
      (format (concat (gittit:github-url-for-file filename) (if end "#L%s-L%s" "#L%s"))
              start
              end))
  #+END_SRC

  These are the public exports:

  #+name: gittit2
  #+BEGIN_SRC emacs-lisp :tangle no
    (defun github-url-for-line  (filename start &optional end)
      "Returns, echoes, and kills the GitHub URL for FILENAME between START and optionally END."
      (interactive (cons (buffer-file-name)
                         (if (use-region-p)
                            (list (region-beginning) (region-end))
                            (list (point)))))
      (let* ((url (gittit:github-url-for-file filename))
             (start-line (1+ (count-lines 1 start)))
             (url (if end
                      (format "%s#L%s-L%s" url start-line (count-lines 1 end))
                      (format "%s#L%s" url start-line))))
        (kill-new url)
        (message url)
        url))

    (defun browse-github-url-for-line (filename start &optional end)
      "Navigate to the GitHub URL for FILENAME between START and optionally END."
      (interactive (cons (buffer-file-name)
                         (if (use-region-p)
                            (list (region-beginning) (region-end))
                            (list (point)))))
      (browse-url (if end (github-url-for-line filename start end)
                    (github-url-for-line filename start))))
  #+END_SRC

  Under the [[http://www.apache.org/licenses/LICENSE-2.0.html][Apache 2.0 License]].

* Misc. Functions

  A bunch of little utility functions created here and elsewhere.
  #+name: functions
  #+BEGIN_SRC emacs-lisp :tangle no
    (defun clear-shell-buffer ()
      "Clear the current buffer"
      (interactive)
      (let ((comint-buffer-maximum-size 0))
         (comint-truncate-buffer)))

    (defun osx:copy-region (start end)
      "Copy the region to OSX's clipboard."
      (interactive (list (region-beginning) (region-end)))
      (shell-command-on-region start end "pbcopy")
      (message "Copied to OSX clipboard!"))

    (defun osx:paste ()
      "Copy the region to OSX's clipboard."
      (interactive)
      (insert (shell-command-to-string "pbpaste"))
      (message "Pasted from OSX clipboard!"))

    (defun osx:copy-kill ()
      "Copy the current kill text to OSX's clipboard."
      (interactive)
      (with-temp-buffer
        (yank)
        (shell-command-on-region 1 (point-max) "pbcopy")))

    (defun set-exec-path-from-shell-PATH ()
      (let ((path-from-shell (replace-regexp-in-string
                              "[ \t\n]*$"
                              ""
                              (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq eshell-path-env path-from-shell) ; for eshell users
        (setq exec-path (split-string path-from-shell path-separator))))

    ;;http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
    (defun smarter-move-beginning-of-line (arg)
      "Move point back to indentation of beginning of line.

    Move point to the first non-whitespace character on this line.
    If point is already there, move to the beginning of the line.
    Effectively toggle between the first non-whitespace character and
    the beginning of the line.

    If ARG is not nil or 1, move forward ARG - 1 lines first.  If
    point reaches the beginning or end of the buffer, stop there."
      (interactive "^p")
      (setq arg (or arg 1))

      ;; Move lines first
      (when (/= arg 1)
        (let ((line-move-visual nil))
          (forward-line (1- arg))))

      (let ((orig-point (point)))
        (back-to-indentation)
        (when (= orig-point (point))
          (move-beginning-of-line 1))))

    (defun endless/load-gh-pulls-mode ()
      "Start `magit-gh-pulls-mode' only after a manual request."
      (interactive)
      (require 'magit-gh-pulls)
      (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls)
      (magit-gh-pulls-mode 1)
      (magit-gh-pulls-reload))

    (defun revert-this-buffer ()
      (interactive)
      (revert-buffer nil t t)
      (message (concat "Reverted buffer " (buffer-name))))

    (defun opam-env ()
      (interactive nil)
      (dolist (var (car (read-from-string
                         (shell-command-to-string "opam config env --sexp"))))
        (setenv (car var) (cadr var)))
      (setq exec-path (append (parse-colon-path (getenv "PATH"))
                              (list exec-directory))))
  #+END_SRC
* Bindings

  Global and some mode-specific bindings that need to be cleaned up.

  #+name: bindings
  #+BEGIN_SRC emacs-lisp :tangle no
    (bind-keys ("<f1>" . gptel)
               ("<f3>" . occur)
               ("<f5>" . calc)
               ("<f6>" . revert-this-buffer)
               ("C-c M-w" . whitespace-mode)
               ("M-j" . (lambda () (interactive) (join-line -1)))
               ("C-x t" . (lambda () (interactive) (insert "TODO(ihodes): ")))
               ("C-x w" . delete-trailing-whitespace)
               ("C-x C-d" . ido-dired)
               ("C-c C-e" . eval-buffer)
               ("C-x C-b" . ibuffer)
               ("C-x C-l" . goto-line)
               ("C-s" . isearch-forward-regexp)
               ("C-r" . isearch-backward-regexp)
               ("s--" . text-scale-adjust)
               ("s-=" . text-scale-adjust))

    (define-key 'help-command "A" #'apropos) ;; (C-h a)

    (eval-after-load 'comint-mode-hook
      '(progn
         (define-key comint-mode-map (kbd "C-c C-t") 'comint-truncate-buffer)))

    ;; remap C-a to `smarter-move-beginning-of-line'
    (global-set-key [remap move-beginning-of-line]
                    'smarter-move-beginning-of-line)
  #+END_SRC


* AI stuff

#+name: ai
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package gptel
    :ensure t
    :bind
    ("C-c g s" . gptel-send)
    ;; ("C-c g e" . gptel-check-cost)
    ("C-c g r" . gptel-rewrite)
    ("C-c g m" . gptel-menu)
    ("C-c g a a" . gptel-add)
    ("C-c g a f" . gptel-add-file)
    ("C-c g c" . gptel)
    ("C-c g g" . gptel-display-keybindings) ;; Updated keybinding to display keybindings
    :config
    (let* ((anthropic-key (auth-source-pick-first-password
                           :host "api.anthropic.com"))
           (gemini-key (auth-source-pick-first-password
                        :host "generativelanguage.googleapis.com")))
      (gptel-make-anthropic "claude" :stream t :key anthropic-key)
      (gptel-make-gemini "Gemini" :stream t :key gemini-key))
    (setq
     gptel-model 'llama3.2:latest
     gptel-backend (gptel-make-ollama "Ollama"
                     :host "localhost:11434"
                     :stream t
                     :models '(llama3.2:latest)))
    (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
    (add-hook 'gptel-post-response-functions 'gptel-end-of-response))

  ;; Get Anthropic API key from ~/.authinfo
  (defun gptel-get-anthropic-api-key ()
    "Get Anthropic API key from auth-source."
    (require 'auth-source)
    (let ((auth-info (car (auth-source-search :host "api.anthropic.com"
                                              :require '(:secret)))))
      (when auth-info
        (funcall (plist-get auth-info :secret)))))

  (defun gptel-calculate-cost (prompt model)
    "Calculate cost of PROMPT string using tokencost Python package for MODEL."
    (let* ((temp-file (make-temp-file "gptel-prompt-")))
      (with-temp-file temp-file
        (insert prompt))
      (let* ((python-command
              (if (or (string-match "claude" model)
                      (string-match "anthropic" model))
                  (let ((api-key (gptel-get-anthropic-api-key)))
                    (format "ANTHROPIC_API_KEY='%s' python3 -c \"
    import tokencost;\
    content = open('%s','r').read();\
    messages = [{'role':'user','content':content}];\
    cost = tokencost.calculate_prompt_cost(messages, '%s');\
    print(cost)\" 2>&1"
                            api-key temp-file model))
                (format "python3 -c \"
    import tokencost;\
    content = open('%s','r').read();\
    cost = tokencost.calculate_prompt_cost(content, '%s');\
    print(cost)\" 2>&1"
                        temp-file model)))
             (output (shell-command-to-string python-command)))
        (delete-file temp-file)
        (message "Debug - Model: %s" model)
        (message "Debug - Output: '%s'" output)
        (let* ((lines (split-string output "[\n\r]+" t))
               (last-line (car (last lines)))
               (match (and last-line
                           (string-match "\([0-9]+\(?:\.[0-9]+\)\)" last-line)
                           (match-string 1 last-line))))
          (if match
              (string-to-number match)
            (error "Failed to parse cost from output: %s" output))))))

  ;; TODO: need a way to get the prompt, otherwise this doesn't estimate well.
  (defun gptel-send-with-confirmation (start end &optional arg)
    "Send query to GPT with cost estimation and user confirmation."
    (interactive
     (if (use-region-p)
         (list (region-beginning) (region-end) current-prefix-arg)
       (list (point-min) (point-max) current-prefix-arg)))
    (let* ((raw-text       (buffer-substring-no-properties start end))
           (model          (or gptel-model "claude-3-5-sonnet-20240620"))
           (prompt         (gptel-build-full-prompt-from-text raw-text))
           (estimated-cost (gptel-calculate-cost prompt model))
           (cost-limit     0.03))         ; USD limit
      (if (> estimated-cost cost-limit)
          (when (yes-or-no-p
                 (format "Estimated cost: $%.6f (limit $%.2f). Send anyway? "
                         estimated-cost cost-limit))
            (gptel-send start end arg))
        (gptel-send start end arg)
        (message "Query sent. Estimated cost: $%.6f" estimated-cost))))

  (defun gptel-check-cost (start end)
    "Estimate the cost of exactly the prompt gptel would send (with context)."
    (interactive "r")
    (let* ((raw-text (buffer-substring-no-properties start end))
           (prompt   (gptel-build-full-prompt-from-text raw-text))
           (model    (or gptel-model "claude-3-5-sonnet-20240620"))
           (cost     (gptel-calculate-cost prompt model)))
      (message "Estimated cost for this prompt: $%.6f" cost)))

  (defun gptel-check-cost (start end)
    "Estimate the cost of exactly the prompt gptel would send (with all context)."
    (interactive "r")
    (let* ((text        (buffer-substring-no-properties start end))
           ;; temporarily yank it into a temp buffer so preview uses exactly that region
           (prompt      (with-temp-buffer
                          (insert text)
                          (gptel-preview-prompt)    ; dumps the full prompt into *gptel-prompt*
                          (with-current-buffer "*gptel-prompt*"
                            (buffer-string))))
           (model       (or gptel-model "claude-3-5-sonnet-20240620"))
           (cost        (gptel-calculate-cost prompt model)))
      (message "Estimated cost for this prompt: $%.6f" cost)))


  (use-package transient
    :ensure t)

  (defun gptel-display-keybindings ()
    "Display gptel keybindings in an interactive transient menu."
    (interactive)
    (transient-define-prefix gptel-transient-menu ()
      ["GPTel Keybindings"
       ("s" "Send (C-c g s)" gptel-send)
       ;; ("e" "Estimate cost (C-c g e)" gptel-check-cost)
       ("r" "Rewrite (C-c g r)" gptel-rewrite)
       ("m" "Menu (C-c g m)" gptel-menu)
       ("a" "Add (C-c g a a)" gptel-add)
       ("f" "Add File (C-c g a f)" gptel-add-file)
       ("g" "Gptel (C-c g c)" gptel)])
    (transient-setup 'gptel-transient-menu))


  (use-package emigo
    :ensure '(emigo :host github
                    :repo "MatthewZMD/emigo"
                    :files (:defaults "*.el" "*.py" "queries")
                    :build (:not compile))
    :config
    (let* ((ihodes/emigo-host "api.anthropic.com")
           (key (auth-source-pick-first-password :host "api.anthropic.com")))
      (emigo-enable)
      (setopt emigo-api-key key)
      (setopt emigo-model "claude-3-5-sonnet-20240620"))
    (define-key emigo-mode-map (kbd "M-n") nil) ;; so we don't override ace-jump-window's bindings (and I don't need M-n in emigo)
    (define-key emigo-mode-map (kbd "M-p") nil))
#+end_src

This places the definition of =ihodes/emigo-host= inside the outer =let=, thus making it available when used in the inner =let*=.
#+END_SRC

* Configuration file layout

  Here I define the ~emacs.el~ file generated by the code in this org file.

  The below block describes how the code above should be organized within the
  generated ~emacs.el~.

  #+BEGIN_SRC emacs-lisp :noweb yes :tangle yes
    ;;;; This file generated from `emacs.org` in this directory.

    <<prelude>>
    <<packages>>
    <<look-and-feel>>
    <<modes>>
    <<modes-el>>
    <<modes-el2>>
    <<modes-cl>>
    <<modes-ts>>
    <<imenu-list-fork>>
    <<ai>>
    <<misc>>
    <<org-mode>>
    <<functions>>
    <<defaults>>
    <<gittit>>
    <<gittit2>>
    <<bindings>>
    <<journaling>>
    #+END_SRC
